--- src/Mono.WebServer/BaseRequestBroker.cs	2007-05-18 12:52:42.000000000 -0700
+++ /home/brian/Programming/mono-soc-2007/brian/FastCgi/Mono.WebServer/BaseRequestBroker.cs	2007-06-19 15:34:48.000000000 -0700
@@ -33,17 +33,66 @@
 
 namespace Mono.WebServer
 {
+	/// <summary>
+	///    This class provides a request broker covering the base
+	///    functionality.
+	/// </summary>
+	/// <remarks>
+	///    A request broker serves as an intermediary between <see
+	///    cref="Worker" /> and <see cref="MonoWorkerRequest" /> to handle
+	///    the interaction between app-domains.
+	/// </remarks>
 	public class BaseRequestBroker: MarshalByRefObject, IRequestBroker
 	{
+		/// <summary>
+		///    Contains the initial request capacity of a <see
+		///    cref="BaseRequestBroker" />.
+		/// </summary>
 		const int INITIAL_REQUESTS = 200;
+		
+		/// <summary>
+		///    Contains a lock to use when accessing and modifying the
+		///     request allocation tables.
+		/// </summary>
 		static object reqlock = new object();		
 
+		/// <summary>
+		///    Contains the request ID's.
+		/// </summary>
 		bool[] request_ids = new bool [INITIAL_REQUESTS];
+		
+		/// <summary>
+		///    Contains the registered workers.
+		/// </summary>
 		Worker[] requests = new Worker [INITIAL_REQUESTS];
+		
+		/// <summary>
+		///    Contains buffers for the requests to use.
+		/// </summary>
 		byte[][] buffers = new byte [INITIAL_REQUESTS][];
-		int requests_count = 0;		
+		
+		/// <summary>
+		///    Contains the number of active requests.
+		/// </summary>
+		int requests_count = 0;
+		
 
-		// this *MUST* be called with the reqlock held!
+		/// <summary>
+		///    Grows the size of the request allocation tables by 33%.
+		/// </summary>
+		/// <param name="curlen">
+		///    A <see cref="int" /> containing the current length of the
+		///    allocation tables.
+		/// </param>
+		/// <param name="newid">
+		///    A <see cref="int" /> containing the ID to use for a new
+		///    request.
+		/// </param>
+		/// <remarks>
+		///    <note type="caution"><para>
+		///        This *MUST* be called with the reqlock held!
+		///    </para></note>
+		/// </remarks>
 		void GrowRequests (ref int curlen, ref int newid)
 		{
 			int newsize = curlen + curlen/3;
@@ -67,7 +116,18 @@
 			curlen = newsize;
 		}
 		
-		// this *MUST* be called with the reqlock held!
+		/// <summary>
+		///    Gets the next available request ID, expanding the array
+		///    of possible ID's if necessary.
+		/// </summary>
+		/// <returns>
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </returns>
+		/// <remarks>
+		///    <note type="caution"><para>
+		///        This *MUST* be called with the reqlock held!
+		///    </para></note>
+		/// </remarks>
 		int GetNextRequestId ()
 		{
 			int reqlen = request_ids.Length;
@@ -93,6 +153,16 @@
 			throw new ApplicationException ("could not allocate new request id");
 		}
 		
+		/// <summary>
+		///    Registers a request with the current instance.
+		/// </summary>
+		/// <param name="worker">
+		///    A <see cref="Worker" /> object containing the request to
+		///    register.
+		/// </param>
+		/// <returns>
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </returns>
 		public int RegisterRequest (Worker worker)
 		{
 			int result = -1;
@@ -100,12 +170,23 @@
 			lock (reqlock) {
 				result = GetNextRequestId ();
 				requests [result] = worker;
-				buffers [result] = new byte [16384];
+				
+				// Don't create a new array if one already
+				// exists.
+				byte[] a = buffers [result];
+				if (a != null && a.Length == 16384)
+					buffers [result] = new byte [16384];
 			}
 
 			return result;
 		}
 		
+		/// <summary>
+		///    Unregisters a request with the current instance.
+		/// </summary>
+		/// <param name="id">
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </param>
 		public void UnregisterRequest (int id)
 		{
 			lock (reqlock) {
@@ -123,12 +204,44 @@
 			}
 		}
 
+		/// <summary>
+		///    Gets whether or not the request with a specified ID is
+		///    valid.
+		/// </summary>
+		/// <param name="requestId">
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </param>
+		/// <returns>
+		///    A <see cref="bool" /> indicating whether or not the
+		///    request is valid.
+		/// </returns>
 		protected bool ValidRequest (int requestId)
 		{
 			return (requestId >= 0 && requestId < request_ids.Length && request_ids [requestId] &&
 				buffers [requestId] != null);
 		}
 		
+		/// <summary>
+		///    Reads a block of request data from the request with a
+		///    specified ID.
+		/// </summary>
+		/// <param name="requestId">
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </param>
+		/// <param name="size">
+		///    A <see cref="int" /> containing the number of bytes to
+		///    read.
+		/// </param>
+		/// <param name="buffer">
+		///    A <see cref="byte[]" /> containing the read data.
+		/// </param>
+		/// <returns>
+		///    A <see cref="int" /> containing the number of bytes that
+		///    were actually read.
+		/// </returns>
+		/// <remarks>
+		///    <para>See <see cref="Worker.Read" />.</para>
+		/// </remarks>
 		public int Read (int requestId, int size, out byte[] buffer)
 		{
 			buffer = null;
@@ -152,6 +265,17 @@
 			return nread;
 		}
 		
+		/// <summary>
+		///    Gets the request with a specified ID.
+		/// </summary>
+		/// <param name="requestId">
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </param>
+		/// <returns>
+		///    A <see cref="Worker" /> object containing the request
+		///    with the specified ID, or <see langword="null" /> if the
+		///    request does not exist.
+		/// </returns>
 		public Worker GetWorker (int requestId)
 		{
 			if (!ValidRequest (requestId))
@@ -162,6 +286,29 @@
 			}
 		}
 		
+		/// <summary>
+		///    Writes a block of response data to the request with a
+		///    specified ID.
+		/// </summary>
+		/// <param name="requestId">
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </param>
+		/// <param name="buffer">
+		///    A <see cref="byte[]" /> containing data to write.
+		/// </param>
+		/// <param name="position">
+		///    A <see cref="int" /> containing the position in <paramref
+		///    name="buffer" /> it which to start writing from.
+		/// </param>
+		/// <param name="size">
+		///    A <see cref="int" /> containing the number of bytes to
+		///    write.
+		/// </param>
+		/// <remarks>
+		///    <para>See <see cref="Worker.Write" />.</para>
+		///    <para>If the request does not exist, no action is
+		///    taken.</para>
+		/// </remarks>
 		public void Write (int requestId, byte[] buffer, int position, int size)
 		{
 			Worker worker = GetWorker (requestId);
@@ -169,6 +316,17 @@
 				worker.Write (buffer, position, size);
 		}
 		
+		/// <summary>
+		///    Closes the request with a specified ID.
+		/// </summary>
+		/// <param name="requestId">
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </param>
+		/// <remarks>
+		///    <para>See <see cref="Worker.Close" />.</para>
+		///    <para>If the request does not exist, no action is
+		///    taken.</para>
+		/// </remarks>
 		public void Close (int requestId)
 		{
 			Worker worker = GetWorker (requestId);
@@ -176,6 +334,17 @@
 				worker.Close ();
 		}
 		
+		/// <summary>
+		///    Flushes the request with a specified ID.
+		/// </summary>
+		/// <param name="requestId">
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </param>
+		/// <remarks>
+		///    <para>See <see cref="Worker.Flush" />.</para>
+		///    <para>If the request does not exist, no action is
+		///    taken.</para>
+		/// </remarks>
 		public void Flush (int requestId)
 		{
 			Worker worker = GetWorker (requestId);
@@ -183,6 +352,21 @@
 				worker.Flush ();
 		}
 
+		/// <summary>
+		///    Gets whether or not the request with a specified ID is
+		///    connected.
+		/// </summary>
+		/// <param name="requestId">
+		///    A <see cref="int" /> containing the ID of the request.
+		/// </param>
+		/// <returns>
+		///    A <see cref="bool" /> indicating whether or not the
+		///    request is connected. If the request doesn't exist, <see
+		///    langref="false" /> will be returned.
+		/// </returns>
+		/// <remarks>
+		///    See <see cref="Worker.IsConnected" />.
+		/// </remarks>
 		public bool IsConnected (int requestId)
 		{
 			Worker worker = GetWorker (requestId);
@@ -190,6 +374,13 @@
 			return (worker != null && worker.IsConnected ());
 		}
 
+		/// <summary>
+		///    Obtains a lifetime service object for the current
+		///    instance.
+		/// </summary>
+		/// <returns>
+		///    Always <see langword="null" />.
+		/// </returns>
 		public override object InitializeLifetimeService ()
 		{
 			return null;
