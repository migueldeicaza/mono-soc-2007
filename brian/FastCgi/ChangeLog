2007-07-20 Brian Nickel <brian.nickel@gmail.com>

	* Mono.FastCgi/UnixSocket.cs: DELETED. 

	* bin/fastcgi-mono-server.exe.config:  Moved. Don't automatically add an
	application for "/:.".

	* Mono.WebServer.FastCgi/ConfigurationManager.xml: 
	* Mono.WebServer.FastCgi/server.cs: Add support for autodetection argument.

	* Mono.WebServer.FastCgi/Responder.cs: 
	* Mono.WebServer/XSPApplicationHost.cs: Change for new API. 

	* Mono.WebServer/ApplicationManager.cs: Add support for automatic
	application detection. When searching for an application, the page's
	virtual and real path are compared to find the root and if no matching
	application with that root is detected, a new one will be created.

	* Mono.FastCgi/Mono.FastCgi.mdp: 
	* Mono.WebServer.FastCgi/Mono.WebServer.FastCgi.mdp: 
	* Mono.WebServer/Mono.WebServer.mdp: Changed target directory.

2007-06-29 Brian Nickel <brian.nickel@gmail.com>

	* Mono.FastCgi/Structures/NameValuePair.cs: Was returning zero for long
	values. Broke reading.
	
	* Mono.FastCgi/SocketFactory.cs: Added pipe socket.
	
	* Mono.FastCgi/SocketAbstractions/UnmanagedSocket.cs: Throw an exception
	if the socket isn't bound.
	
	* Mono.WebServer.FastCgi/AssemblyInfo.cs: Remove extra "(c)"
	
	* Mono.WebServer.FastCgi/ConfigurationManager.xml: New and improved
	format.
	
	* Mono.WebServer.FastCgi/ConfigurationManager.cs: Added.
	
	* Mono.WebServer.FastCgi/Mono.WebServer.FastCgi.mdp: Added new file.
	
	* Mono.WebServer.FastCgi/server.cs: Use ConfigurationManager.
	
	* Mono.WebServer.FastCgi/fastcgi-mono-server.exe.config: Change
	defaults.

2007-06-24 Brian Nickel <brian.nickel@gmail.com>

	* Mono.FastCgi/Structures/Record.cs: Added support for sending and 
	receiving on buffers to reduce the amount of memory allocation work.
	
	* Mono.FastCgi/Structures/BeginRequestBody.cs: Use new buffering API.
	
	* Mono.FastCgi/Structures/EndRequestBody.cs: Tidy up source a bit.
	
	* Mono.FastCgi/Structures/UnknownTypeBody.cs: ADDED. Implemented for
	FastCGI unknown type record.
	
	* Mono.FastCgi/Connection.cs: Use buffers to process data.
	
	* Mono.FastCgi/SocketAbstractions/ISocketAbstraction.cs: Use full
	arguments on Send and Receive.
	
	* Mono.FastCgi/SocketAbstractions/UnmanagedSocket.cs: ADDED. Initial
	work on standard FastCGI socket.
	
	* Mono.FastCgi/SocketAbstractions/StandardSocket.cs: Extend new methods.
	
	* Mono.FastCgi/Mono.FastCgi.mdp: Automatic changes.
	
	* Mono.FastCgi/Server.cs: Added buffer management similar to
	Mono.WebServer.BaseRequestBroker.
	
	* Mono.FastCgi/Requests/Request.cs: Use buffers.
	
	* Mono.FastCgi/Requests/ResponderRequest.cs: Replace "language"
	attribute with "lang" in "code" element.
	
	* Mono.WebServer.FastCgi/ConfigurationManager.xml: Initial work on
	configuration management.
	
	* Mono.WebServer.FastCgi/Mono.WebServer.FastCgi.mdp: Automatic changes.
	
	* Mono.WebServer.FastCgi/fastcgi-mono-server.exe.config: Initial work on
	config file.
	
	* Mono.WebServer/MonoWorkerRequest.cs: Documentation.
	
	* Mono.WebServer/Tracing.cs: Documentation.
	
	* Mono.WebServer/BaseRequestBroker.cs: Documentation.
	
	* Mono.WebServer/BaseApplicationHost.cs: Documentation.
	
	* Mono.WebServer/LingeringNetworkStream.cs: Documentation.

2007-06-19 Brian Nickel <brian.nickel@gmail.com>

	* Mono.WebServer/ApplicationServer.cs: Use the WebSource support in
	ApplicationManager.
	
	* Mono.WebServer/ApplicationManager.cs: Add support for WebSource so the
	request broker gets assigned correctly in XSP implemenations.
	
	* Mono.WebServer/IWebSource.cs: Documented.
	
	* Mono.WebServer/IApplicationHost.cs: Documented.

2007-06-19 Brian Nickel <brian.nickel@gmail.com>

	* FastCgi/Mono.WebServer.FastCgi/Responder.cs:
	* FastCgi/Mono.WebServer.FastCgi/WorkerRequest.cs: Fix for new API.

2007-06-19 Brian Nickel <brian.nickel@gmail.com>

	* Mono.FastCgi/Structures/BeginRequestBody.cs:
	* Mono.FastCgi/Structures/EndRequestBody.cs:
	* Mono.FastCgi/Structures/Record.cs:
	* Mono.FastCgi/Structures/NameValuePair.cs:
	* Mono.FastCgi/Connection.cs:
	* Mono.FastCgi/Logger.cs:
	* Mono.FastCgi/SocketFactory.cs:
	* Mono.FastCgi/SocketAbstractions/ISocketAbstraction.cs:
	* Mono.FastCgi/SocketAbstractions/TcpSocket.cs:
	* Mono.FastCgi/SocketAbstractions/StandardSocket.cs:
	* Mono.FastCgi/Server.cs:
	* Mono.FastCgi/Requests/Request.cs:
	* Mono.FastCgi/Requests/ResponderRequest.cs: Finished documenting
	Mono.FastCgi namespace. Added 1 FIXME (implement UnknownType).
	
	* Mono.WebServer/MonoWorkerRequest.cs: Documented.
	* Mono.WebServer/Mono.WebServer.mdp: Compile documentation.

2007-06-15 Brian Nickel <brian.nickel@gmail.com>

	* Mono.FastCgi/Logger.cs: Made singleton to take advantage of
	destructor. Documented completely.

2007-06-14 Brian Nickel <brian.nickel@gmail.com>

	* Mono.FastCgi/Structures/Record.cs: Use Mono.FastCgi.Socket instead of
	ISocketAbstraction.
	
	* Mono.FastCgi/Connection.cs: Use ArrayList instead of HashTable.
	Properly case private fields. Check that socket is connected before 
	writing.
	
	* Mono.FastCgi/SocketFactory.cs: ADDED. This class creates sockets,
	hiding the internal types used for creating sockets. (This will be very
	helpful for refactoring later.)
	
	* Mono.FastCgi/SocketAbstractions/ISocketAbstraction.cs: Change to 
	abstract Socket class. This is Marek's idea to simplify refactoring
	later.
	
	* Mono.FastCgi/SocketAbstractions/TcpSocket.cs: Make internal.
	
	* Mono.FastCgi/SocketAbstractions/StandardSocket.cs: Make internal.
	
	* Mono.FastCgi/Mono.FastCgi.mdp: Automatic changes.
	
	* Mono.FastCgi/Server.cs: Make things nice and pretty. Regions, XML 
	documentation, all that jazz.
	
	* Mono.FastCgi/Requests/Request.cs: Add IsConnected.
	
	* Mono.FastCgi/Requests/ResponderRequest.cs: Remove System.Net.Sockets
	
	* Mono.WebServer/MonoWorkerRequest.cs: Remove unnecessary protected
	properties.
	
	* Mono.WebServer/Mono.WebServer.mdp: Automatic changes.
	
	* Mono.WebServer/ApplicationServer.cs: Make subclass of
	ApplicationManager. Move management functionality to ApplicationManager.
	
	* Mono.WebServer/BaseApplicationHost.cs: Check before casting broker as
	BaseRequestBroker.
	
	* Mono.WebServer/ApplicationManager.cs: ADDED. This removes application
	management logic from Application server. It removes the dependency on
	WebSource.
	
	* Mono.WebServer/IApplicationHost.cs: Use ApplicationManager.
	
	* Mono.WebServer.FastCgi/ApplicationHost.cs: Use BaseApplicationHost
	again as it is no longer tied to BaseApplicationBroker.
	
	* Mono.WebServer.FastCgi/Responder.cs: Expose IsConnected.
	
	* Mono.WebServer.FastCgi/WorkerRequest.cs: Support IsClientConnected ().
	
	* Mono.WebServer.FastCgi/Mono.WebServer.FastCgi.mdp: Automatic changes.
	
	* Mono.WebServer.FastCgi/server.cs: Use ApplicationManager.

2007-06-14 Brian Nickel <brian.nickel@gmail.com>

	* ADDED: Mono.WebServer (local copy)

2007-06-13 Brian Nickel <brian.nickel@gmail.com>

	* MOVED: FastCgi/FastCgi -> FastCgi/Mono.FastCgi

2007-06-13 Brian Nickel <brian.nickel@gmail.com>

	* FastCgi/FastCgi/FastCgi.mdp: Build as library.
	
	* FastCgi/FastCgi/AssemblyInfo.cs: Added title and description.
	
	* FastCgi/FastCgi/Structures/BeginRequestBody.cs: Changed namespace.
	
	* FastCgi/FastCgi/Structures/EndRequestBody.cs: Changed namespace.
	
	* FastCgi/FastCgi/Structures/Record.cs: Use ISocketAbstraction instead
	of Socket.
	
	* FastCgi/FastCgi/Structures/NameValuePair.cs: Changed namespace.
	
	* FastCgi/FastCgi/Connection.cs: Use ISocketAbstraction instead of
	Socket.
	
	* FastCgi/FastCgi/Logger.cs: Don't constantly flush and don't throw an
	exception if no output file was specified.
	
	* FastCgi/FastCgi/SocketAbstractions/ISocketAbstraction.cs: Added.
	Wraps around socket implementations.
	
	* FastCgi/FastCgi/SocketAbstractions/TcpSocket.cs: Added. Handles
	standard TCP sockets.
	
	* FastCgi/FastCgi/SocketAbstractions/StandardSocket.cs: Added. Handles
	managed sockets.
	
	* FastCgi/FastCgi/Main.cs: Deleted. Project is now a library.
	
	* FastCgi/FastCgi/Servers: Deleted. Servers have been refactored to
	handle different socket types rather than a different socket superclass
	for each type of socket.
	
	* FastCgi/FastCgi/Server.cs: Moved from Servers/
	
	* FastCgi/FastCgi/Requests/Request.cs: Include data length in 
	SendStreamData to support data passed from a buffer.
	
	* FastCgi/FastCgi/Requests/ResponderRequest.cs: Don't close the request
	if the appStatus == int.MinValue. This affords the IResponder the
	opportunity to create its own thread.
	
	* FastCgi/FastCgi.mds: Automatic changes.
	
	* AND THE COOL PART:
	
	* FastCgi/Mono.WebServer.FastCgi/AssemblyInfo.cs:
	* FastCgi/Mono.WebServer.FastCgi/WebSource.cs:
	* FastCgi/Mono.WebServer.FastCgi/ApplicationHost.cs:
	* FastCgi/Mono.WebServer.FastCgi/Responder.cs:
	* FastCgi/Mono.WebServer.FastCgi/WorkerRequest.cs:
	* FastCgi/Mono.WebServer.FastCgi/Mono.WebServer.FastCgi.mdp:
	* FastCgi/Mono.WebServer.FastCgi/server.cs: Added. This is a web server
	implementation built on top of Mono.WebServer and Mono.FastCgi providing
	ASP.NET support.

2007-06-08 Brian Nickel <brian.nickel@gmail.com>

	* FastCgi/Structures/NameValuePair.cs: Use new Logger.Write for better
	output.
	
	* FastCgi/Connection.cs: Reject multiplexed requests if disabled. Rename
	Start to Run. Add Stop to end the connection properly.
	
	* FastCgi/Logger.cs: Incorporate the string formatter into "Write".
	
	* FastCgi/Main.cs: Update for API changes.
	
	* FastCgi/Servers/Server.cs: Use code from
	Mono.WebServer.ApplicationServer to allow the server thread to run in
	the background. Fix some bugs which were causing the server to hang.
	
	* FastCgi/Requests/Request.cs: Add properties: Server and RequestID.
	
	* FastCgi/Requests/ResponderRequest.cs: Check if input_data == null.
	Use QueueUserWorkItem when multiplexing.

2007-06-07 Brian Nickel <brian.nickel@gmail.com>

	* FastCgi/Structures/NameValuePair.cs: Reworked NameValuePair to support
	a user specified encoding. Moved the parsing of collection to internal
	"static IDictionary FromData (byte [] data)". Added support for
	rendering a collection.
	
	* FastCgi/Connection.cs: Added support for rejecting requests if too
	many are occuring simulaneously. Added support for "FCGI_GET_VALUES"
	requests. Inform the server when a request has been completed. Prevent
	accepting requests if the maximum number of requests has been reached.
	
	* FastCgi/Main.cs: Use new server specific API for registering the
	responder.
	
	* FastCgi/Servers/Server.cs: Added support for limiting connections and
	requests, and enabling/disabling multiplexing. Added support for FastCGI
	style server.GetValues. Prevent accepting if the maximum number of
	connections has been reached. Moved responder registration from
	ResponderRequest to allow for per-server responders.
	
	* FastCgi/Requests/Request.cs: Replaced name/value parsing with 
	NameValuePair.FromData.
	
	* FastCgi/Requests/ResponderRequest.cs: Moved responder registration to
	Server.

2007-06-04 Brian Nickel <brian.nickel@gmail.com>

	* FastCgi/Responders/: Renamed to "Requests".
	* FastCgi/FastCgi.mdp: Automatic changes.
	
	* FastCgi/Structures/NameValuePair.cs: Replaced TryParse() with a
	constructor and switched to System.Encoding.Default.
	
	* FastCgi/Structures/BeginRequestBody.cs:
	* FastCgi/Structures/EndRequestBody.cs:
	* FastCgi/Structures/Record.cs:
	* FastCgi/Connection.cs:
	* FastCgi/Logger.cs:
	* FastCgi/Main.cs:
	* FastCgi/Servers/TcpServer.cs:
	* FastCgi/Servers/Server.cs:
	* FastCgi/Requests/Request.cs:
	* FastCgi/Requests/ResponderRequest.cs: Applied Mono Coding Guidelines.
