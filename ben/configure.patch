Index: configure.in
===================================================================
--- configure.in	(revision 83179)
+++ configure.in	(working copy)
@@ -180,121 +180,29 @@
 
 AM_CONDITIONAL(ENABLE_SUBVERSION, test x$enable_subversion = xyes)
 
-dnl *********************************************************
-dnl *** The following hunk of script-fu is to detect the  ***
-dnl *** available MonoQuery database providers...         ***
-dnl *********************************************************
-AC_ARG_ENABLE(monoquery,
-	AC_HELP_STRING([--enable-monoquery],
-		[enable MonoQuery support [default=auto]]),
-		enable_monoquery=${enableval}, enable_monoquery=yes)
+dnl *************************************************************
+dnl *** The following hunk of script-fu is to detect the      ***
+dnl *** available MonoDevelop.Database database providers...  ***
+dnl *************************************************************
+AC_ARG_ENABLE(database,
+	AC_HELP_STRING([--enable-database],
+		[enable MonoDevelop.Database support [default=auto]]),
+		enable_database=${enableval}, enable_database=yes)
 
-SQL_PROVIDER_ATTRIBUTES="[[XmlInclude (typeof (FirebirdDbProvider))]\n\t[XmlInclude (typeof (OdbcDbProvider))]]"
-monoquery_avail=0
-enable_postgres=no
-enable_mysql=no
-enable_sqlite=no
-enable_oracle=no
-enable_sqlserv=no
-enable_sybase=no
+enable_postgres=yes
+enable_mysql=yes
+enable_sqlite=yes
+enable_sqlserv=yes
+dnl *** postgre and sqlserver are available in all current mono intalls ***
+dnl *** Mono.Data.Sqlite is available since mono 1.2.4, but bundled for now ***
+dnl *** MySql.Data is also bundled ***
 
-if test "x$enable_monoquery" = "xyes"; then
-   monoquery_try_compile () {
-      cat <<EOF | sed -e "s/\${Dbase}/${Dbase}/g" -e "s/\${Using}/${Using}/g" > myconftest.cs
-using System;
-using System.Data;
-using System.Collections;
-
-using ${Using};
-
-namespace Autoconf.Try.Compile {
-	public class Program {
-		public static void Main (string [[]] args)
-		{
-			${Dbase}Connection connection = new ${Dbase}Connection ();
-			connection.Open ();
-		}
-	}
-}
-EOF
-      $CSC myconftest.cs -r:System.Data $ExtraDbAssemblies > /dev/null 2>&1
-      if test $? -eq 0; then
-	 my_ac_conftest_result="yes"
-	 monoquery_avail=`expr $monoquery_avail + 1`
-	 SQL_PROVIDER_ATTRIBUTES="[$SQL_PROVIDER_ATTRIBUTES\n\t[XmlInclude (typeof (${Dbase}DbProvider))]]"
-      else
-         my_ac_conftest_result="no"
-      fi
-      rm -f myconftest.cs myconftest.exe
-   }
-   
-   AC_MSG_CHECKING([for PostgreSQL support])
-   ExtraDbAssemblies="-r:Npgsql"
-   Using="Npgsql"
-   Dbase="Npgsql"
-   monoquery_try_compile
-   enable_postgres=$my_ac_conftest_result
-   AC_MSG_RESULT($my_ac_conftest_result)
-   
-   AC_MSG_CHECKING([for MySQL support])
-   ExtraDbAssemblies="-r:ByteFX.Data"
-   Using="ByteFX.Data.MySqlClient"
-   Dbase="MySql"
-   monoquery_try_compile
-   enable_mysql=$my_ac_conftest_result
-   AC_MSG_RESULT($my_ac_conftest_result)
-   
-   AC_MSG_CHECKING([for SQLite support])
-   ExtraDbAssemblies="-r:Mono.Data.SqliteClient"
-   Using="Mono.Data.SqliteClient"
-   Dbase="Sqlite"
-   monoquery_try_compile
-   enable_sqlite=$my_ac_conftest_result
-   AC_MSG_RESULT($my_ac_conftest_result)
-   
-   AC_MSG_CHECKING([for Oracle support])
-   ExtraDbAssemblies="-r:System.Data.OracleClient"
-   Using="System.Data.OracleClient"
-   Dbase="Oracle"
-   monoquery_try_compile
-   enable_oracle=$my_ac_conftest_result
-   AC_MSG_RESULT($my_ac_conftest_result)
-   
-   AC_MSG_CHECKING([for SQL Server support])
-   ExtraDbAssemblies=""
-   Using="System.Data.SqlClient"
-   Dbase="Sql"
-   monoquery_try_compile
-   enable_sqlserv=$my_ac_conftest_result
-   AC_MSG_RESULT($my_ac_conftest_result)
-   
-   AC_MSG_CHECKING([for Sybase support])
-   ExtraDbAssemblies="-r:Mono.Data.SybaseClient"
-   Using="Mono.Data.SybaseClient"
-   Dbase="Sybase"
-   monoquery_try_compile
-   enable_sybase=$my_ac_conftest_result
-   AC_MSG_RESULT($my_ac_conftest_result)
-   
-   dnl If no providers are available, disable MonoQuery support
-   if test $monoquery_avail -eq 0; then
-      enable_monoquery="no"
-   fi
-fi
-
-AM_CONDITIONAL(ENABLE_MONOQUERY, [test $enable_monoquery = yes])
+AM_CONDITIONAL(ENABLE_DATABASE, [test $enable_database = yes])
 AM_CONDITIONAL(ENABLE_POSTGRES, [test $enable_postgres = yes])
 AM_CONDITIONAL(ENABLE_MYSQL, [test $enable_mysql = yes])
 AM_CONDITIONAL(ENABLE_SQLITE, [test $enable_sqlite = yes])
-AM_CONDITIONAL(ENABLE_ORACLE, [test $enable_oracle = yes])
 AM_CONDITIONAL(ENABLE_SQLSERV, [test $enable_sqlserv = yes])
-AM_CONDITIONAL(ENABLE_SYBASE, [test $enable_sybase = yes])
 
-sed -e "s/@SQLProviderAttributes@/$SQL_PROVIDER_ATTRIBUTES/" \
-    $srcdir/Extras/MonoQuery/MonoQuery/Gui/DbProviderCollection.cs.in \
-    > $srcdir/Extras/MonoQuery/MonoQuery/Gui/DbProviderCollection.cs
-
-
 dnl ASP.NET project addin
 XSP_VERSION=0.1
 XSP2_VERSION=0.2
@@ -455,9 +363,16 @@
 Extras/Makefile
 Extras/MonoDeveloperExtensions/Makefile
 Extras/MonoDeveloperExtensions/NUnit/Makefile
-Extras/MonoQuery/Makefile
-Extras/MonoQuery/Mono.Data.Sql/Makefile
-Extras/MonoQuery/MonoQuery/Makefile
+Extras/MonoDevelop.Database/Makefile
+Extras/MonoDevelop.Database/MonoDevelop.Database.Sql/Makefile
+Extras/MonoDevelop.Database/MonoDevelop.Database.Sql.MySql/Makefile
+Extras/MonoDevelop.Database/MonoDevelop.Database.Sql.Npgsql/Makefile
+Extras/MonoDevelop.Database/MonoDevelop.Database.Sql.Sqlite/Makefile
+Extras/MonoDevelop.Database/MonoDevelop.Database.Sql.SqlServer/Makefile
+Extras/MonoDevelop.Database/MonoDevelop.Database.Components/Makefile
+Extras/MonoDevelop.Database/MonoDevelop.Database.Query/Makefile
+Extras/MonoDevelop.Database/MonoDevelop.Database.Designer/Makefile
+Extras/MonoDevelop.Database/MonoDevelop.Database.ConnectionManager/Makefile
 Extras/NUnit/Makefile
 Extras/VersionControl/Diff/Makefile
 Extras/VersionControl/DiffWidget/Makefile
@@ -505,16 +420,14 @@
 echo "   * C# compiler = $CSC"
 echo "   * Mozilla home: $MOZILLA_HOME"
 echo "   * mono-debugger: $enable_debugger"
-echo "   * MonoQuery support: $enable_monoquery"
+echo "   * MonoDevelop.Database support: $enable_database"
 
-if test "x$enable_monoquery" = "xyes"; then
+if test "x$enable_database" = "xyes"; then
 echo "   *   Providers:"
 echo "   *     PostgreSQL:   $enable_postgres"
 echo "   *     MySQL:        $enable_mysql"
 echo "   *     SQLite:       $enable_sqlite"
-echo "   *     Oracle:       $enable_oracle"
 echo "   *     SQL Server:   $enable_sqlserv"
-echo "   *     Sybase:       $enable_sybase"
 fi
 
 echo "   * java support: $enable_java"
