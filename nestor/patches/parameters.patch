Index: console/ConsoleRunner.cs
===================================================================
--- console/ConsoleRunner.cs	(revisión: 83281)
+++ console/ConsoleRunner.cs	(copia de trabajo)
@@ -175,10 +175,80 @@
 					return false;
 				}
 			}
+			if (!LoadParameters (ruleset))
+				return false;
 		}
 		return result;
 	}
 
+	bool LoadParameters (XmlElement ruleset) {
+		foreach (XmlElement parameter in ruleset.SelectNodes ("parameter")) {
+			try {
+				if (!parameter.HasAttribute ("name"))
+					throw new XmlException ("The attribute name can't be found");
+				if (!parameter.HasAttribute ("value"))
+					throw new XmlException ("The attribute value can't be found");
+				if (!parameter.HasAttribute ("rule"))
+					throw new XmlException ("The attribute rule can't be found");
+					
+				string name = GetAttribute (parameter, "name", String.Empty);
+				int value = 0;
+				try {
+					value = Int32.Parse (GetAttribute (parameter, "value", String.Empty));
+				} 
+				catch (Exception exception) {
+					throw new XmlException ("The value for the value field should be an integer.", exception);
+				}
+				string ruleName = GetAttribute (parameter, "rule", String.Empty);
+
+				ApplyParameterToRule (ruleName, name, value);
+			}
+			catch (Exception e) {
+				Console.WriteLine ("Error reading parameters{1}Details: {0}", e, Environment.NewLine);
+				return false;
+			}
+		}
+		return true;
+	}
+
+	void ApplyParameterToRule (string ruleName, string name, int value) 
+	{
+		IRule rule = GetRule (ruleName);
+		if (rule == null)
+			throw new ArgumentException (String.Format ("The rule name {0} can't be found in the rules collection", ruleName), "rule");
+		PropertyInfo property = rule.GetType ().GetProperty (name);
+		if (property == null)
+			throw new ArgumentException (String.Format ("The property {0} can't be found in the rule {1}", name, ruleName), "name");
+		if (!property.CanWrite)
+			throw new ArgumentException (String.Format ("The property {0} can't be written in the rule {1}", name, ruleName), "name");
+		property.GetSetMethod ().Invoke (rule, new object[] {value});
+	}
+
+	IRule GetRule (string name) 
+	{
+		IRule result;
+		result = GetRuleFromSet (name, Rules.Assembly);
+		if (result == null) {
+			result = GetRuleFromSet (name, Rules.Module);
+			if (result == null) {
+				result = GetRuleFromSet (name, Rules.Type);
+				if (result == null) {
+					result = GetRuleFromSet (name, Rules.Method);
+				}
+			}
+		}
+		return result;
+	}
+
+	IRule GetRuleFromSet (string name, RuleCollection rules) 
+	{
+		foreach (IRule rule in rules) {
+			if (String.Compare (name, rule.GetType ().FullName) == 0)
+				return rule;
+		}
+		return null;
+	}
+
 	static void Header ()
 	{
 		if (quiet)
Index: console/ChangeLog
===================================================================
--- console/ChangeLog	(revisión: 83281)
+++ console/ChangeLog	(copia de trabajo)
@@ -1,3 +1,8 @@
+2007-08-02  Nestor Salceda  <nestor.salceda@gmail.com>
+	
+	* ConsoleRunner.cs: Added support for specify parameters for tweak
+	rules in the config file.
+
 2006-10-15  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* gendarme.xsl: Create only one new browser-window per rule.
